{
open Fang.GeneratedParser

open FSharp.Text.Lexing

let lexeme = LexBuffer<_>.LexemeString
    
let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let letter = ['a'-'z' 'A'-'Z']
let decDigit = ['0' - '9']
let decNum = decDigit+
let ident  = ('_' | letter) (letter | decDigit)* '\''*
let whitespace  = [' ' '\t']   
let newline = ('\n' | 'r' 'n')

rule token = parse
| "if" { IF }
| "then" { THEN }
| "else" { ELSE }
| "let" { LET }
| "rec" { REC }
| "in" { IN }
| '\\' { BSLASH }
| '.' { DOT }
| '(' { LPAR }
| ')' { RPAR }
| ',' { COMMA }
| '+' { ADD }
| '-' { SUB }
| '*' { MUL }
| '/' { DIV }
| '=' { EQ }
| '<' { LE }
| '>' { GE }
| ident { IDENT (lexeme lexbuf) }
| decNum { INT (System.Int32.Parse(lexeme lexbuf)) }
| whitespace { token lexbuf }
| newline { newline lexbuf; token lexbuf }
| eof { EOF}
| '.' { ERROR (lexeme lexbuf) }